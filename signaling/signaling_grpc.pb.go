// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: signaling.proto

package signaling

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SipService_StreamChannel_FullMethodName = "/signaling.SipService/StreamChannel"
	SipService_IpcEventReq_FullMethodName   = "/signaling.SipService/IpcEventReq"
	SipService_IpcInviteReq_FullMethodName  = "/signaling.SipService/IpcInviteReq"
)

// SipServiceClient is the client API for SipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SipServiceClient interface {
	// 双向流式通信通道
	StreamChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerCommand], error)
	IpcEventReq(ctx context.Context, in *IpcEventRequest, opts ...grpc.CallOption) (*IpcEventAck, error)
	IpcInviteReq(ctx context.Context, in *IpcInviteRequest, opts ...grpc.CallOption) (*IpcInviteAck, error)
}

type sipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSipServiceClient(cc grpc.ClientConnInterface) SipServiceClient {
	return &sipServiceClient{cc}
}

func (c *sipServiceClient) StreamChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerCommand], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SipService_ServiceDesc.Streams[0], SipService_StreamChannel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMessage, ServerCommand]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SipService_StreamChannelClient = grpc.BidiStreamingClient[ClientMessage, ServerCommand]

func (c *sipServiceClient) IpcEventReq(ctx context.Context, in *IpcEventRequest, opts ...grpc.CallOption) (*IpcEventAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IpcEventAck)
	err := c.cc.Invoke(ctx, SipService_IpcEventReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipServiceClient) IpcInviteReq(ctx context.Context, in *IpcInviteRequest, opts ...grpc.CallOption) (*IpcInviteAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IpcInviteAck)
	err := c.cc.Invoke(ctx, SipService_IpcInviteReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SipServiceServer is the server API for SipService service.
// All implementations must embed UnimplementedSipServiceServer
// for forward compatibility.
type SipServiceServer interface {
	// 双向流式通信通道
	StreamChannel(grpc.BidiStreamingServer[ClientMessage, ServerCommand]) error
	IpcEventReq(context.Context, *IpcEventRequest) (*IpcEventAck, error)
	IpcInviteReq(context.Context, *IpcInviteRequest) (*IpcInviteAck, error)
	mustEmbedUnimplementedSipServiceServer()
}

// UnimplementedSipServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSipServiceServer struct{}

func (UnimplementedSipServiceServer) StreamChannel(grpc.BidiStreamingServer[ClientMessage, ServerCommand]) error {
	return status.Errorf(codes.Unimplemented, "method StreamChannel not implemented")
}
func (UnimplementedSipServiceServer) IpcEventReq(context.Context, *IpcEventRequest) (*IpcEventAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpcEventReq not implemented")
}
func (UnimplementedSipServiceServer) IpcInviteReq(context.Context, *IpcInviteRequest) (*IpcInviteAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpcInviteReq not implemented")
}
func (UnimplementedSipServiceServer) mustEmbedUnimplementedSipServiceServer() {}
func (UnimplementedSipServiceServer) testEmbeddedByValue()                    {}

// UnsafeSipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SipServiceServer will
// result in compilation errors.
type UnsafeSipServiceServer interface {
	mustEmbedUnimplementedSipServiceServer()
}

func RegisterSipServiceServer(s grpc.ServiceRegistrar, srv SipServiceServer) {
	// If the following call pancis, it indicates UnimplementedSipServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SipService_ServiceDesc, srv)
}

func _SipService_StreamChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SipServiceServer).StreamChannel(&grpc.GenericServerStream[ClientMessage, ServerCommand]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SipService_StreamChannelServer = grpc.BidiStreamingServer[ClientMessage, ServerCommand]

func _SipService_IpcEventReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpcEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipServiceServer).IpcEventReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipService_IpcEventReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipServiceServer).IpcEventReq(ctx, req.(*IpcEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipService_IpcInviteReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpcInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipServiceServer).IpcInviteReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipService_IpcInviteReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipServiceServer).IpcInviteReq(ctx, req.(*IpcInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SipService_ServiceDesc is the grpc.ServiceDesc for SipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signaling.SipService",
	HandlerType: (*SipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IpcEventReq",
			Handler:    _SipService_IpcEventReq_Handler,
		},
		{
			MethodName: "IpcInviteReq",
			Handler:    _SipService_IpcInviteReq_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChannel",
			Handler:       _SipService_StreamChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "signaling.proto",
}
